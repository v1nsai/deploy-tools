#cloud-config
package_update: true
packages:
  - bash-completion
  - python3
  - python3-pip
users:
  - name: drew
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    groups: sudo
    shell: /bin/bash
    lock_passwd: false
    passwd: $6$rounds=4096$nQEeaHtrjiUlxOPi$LQlgi0XBR6u46AJFhWxsWBBK8YqHbGWYWkWnG.YhmdYkc/lMiAacMwQAbZ0W7MosLFexushHQpfa05eG7gsL/1
    ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDQlba47olSkYMMh40lIMnU5TPAYStp4FrSPvruGmuM01OYSbamZdE7fEec3UnSKR6rQNpEthVqr61tlz2yXxnWbOmLBaxQwT8Q1h3wiEWR5WPeBUmDpuEmHJtZzUZKeUABDQHfywN01yZ8RZssCdPvziS9t9pgeHlfL4hnkAFNbhgfOniNhtEIBeLsmNDinAH2TvCXv3cYTzwXC9n2E3ruwEgmWTxieWNVFBoa8QKkhXiw+h08cYv9ZaP5yi8h2oXpJTKFUZ5LId1xuIhb95K7sBLr83vMLU7CGjlFTvet6MiEKXrPjY1hbvUf1+uFZZQSYOANR+9Gtviolxux7IAH
write_files:
  - content: |
      export METHOD=cloud
      export ONDEMAND_CELLULAR=false
      export ONDEMAND_WIFI=false
      # export ONDEMAND_WIFI_EXCLUDE
      export STORE_PKI=true
      export DNS_ADBLOCKING=true
      export SSH_TUNNELING=true
      # export ENDPOINT=
      export USERS=user1,user2
      # export REPO_SLUG
      # export REPO_BRANCH
      # export EXTRA_VARS
      # export ANSIBLE_EXTRA_ARGS="-e server=''"
    path: /etc/environment
    append: true
  - path: /opt/config.cfg
    permissions: 600
    encoding: base64
    content: 
runcmd:
  - git clone https://github.com/trailofbits/algo.git /opt/algo
  - cd /opt
  - export ENDPOINT=$(curl ifconfig.me)
  - chmod +x /opt/algo/install.sh
  - mv /opt/config.cfg /opt/algo/config.cfg
  - algo/install.sh
  - chown -R drew:drew /opt/algo
