#cloud-config
packages:
  - docker
  - docker-compose-v2
  - net-tools
  - nnn
package_update: true
write_files:
  - path: /etc/environment
    content: |
      URL=nextcloud-testing.techig.com
      STAGING=true
    append: true
  - path: /opt/deploy/docker-compose.yaml
    content: |
      services:
        nextcloud:
          profiles:
            - swag
            - selfsigned
          image: nextcloud/all-in-one:latest
          restart: always
          container_name: nextcloud-aio-mastercontainer # This line is not allowed to be changed as otherwise AIO will not work correctly
          hostname: nextcloud-aio-mastercontainer
          volumes:
            - nextcloud_aio_mastercontainer:/mnt/docker-aio-config # This line is not allowed to be changed as otherwise the built-in backup solution will not work
            - /var/run/docker.sock:/var/run/docker.sock:ro # May be changed on macOS, Windows or docker rootless. See the applicable documentation. If adjusting, don't forget to also set 'WATCHTOWER_DOCKER_SOCKET_PATH'!
          ports:
            # - 80:80 # Can be removed when running behind a web server or reverse proxy (like Apache, Nginx, Cloudflare Tunnel and else). See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
            - 8080:8080
            # - 8443:8443 # Can be removed when running behind a web server or reverse proxy (like Apache, Nginx, Cloudflare Tunnel and else). See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
          environment: # Is needed when using any of the options below
            # - AIO_DISABLE_BACKUP_SECTION=false # Setting this to true allows to hide the backup section in the AIO interface. See https://github.com/nextcloud/all-in-one#how-to-disable-the-backup-section
            - APACHE_PORT=11000 # Is needed when running behind a web server or reverse proxy (like Apache, Nginx, Cloudflare Tunnel and else). See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
            - APACHE_IP_BINDING=127.0.0.1 # Should be set when running behind a web server or reverse proxy (like Apache, Nginx, Cloudflare Tunnel and else) that is running on the same host. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
            # - BORG_RETENTION_POLICY=--keep-within=7d --keep-weekly=4 --keep-monthly=6 # Allows to adjust borgs retention policy. See https://github.com/nextcloud/all-in-one#how-to-adjust-borgs-retention-policy
            # - COLLABORA_SECCOMP_DISABLED=false # Setting this to true allows to disable Collabora's Seccomp feature. See https://github.com/nextcloud/all-in-one#how-to-disable-collaboras-seccomp-feature
            # - NEXTCLOUD_DATADIR=/mnt/ncdata # Allows to set the host directory for Nextcloud's datadir. ⚠️⚠️⚠️ Warning: do not set or adjust this value after the initial Nextcloud installation is done! See https://github.com/nextcloud/all-in-one#how-to-change-the-default-location-of-nextclouds-datadir
            # - NEXTCLOUD_MOUNT=/mnt/ # Allows the Nextcloud container to access the chosen directory on the host. See https://github.com/nextcloud/all-in-one#how-to-allow-the-nextcloud-container-to-access-directories-on-the-host
            # - NEXTCLOUD_UPLOAD_LIMIT=10G # Can be adjusted if you need more. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-upload-limit-for-nextcloud
            # - NEXTCLOUD_MAX_TIME=3600 # Can be adjusted if you need more. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-max-execution-time-for-nextcloud
            # - NEXTCLOUD_MEMORY_LIMIT=512M # Can be adjusted if you need more. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-php-memory-limit-for-nextcloud
            # - NEXTCLOUD_TRUSTED_CACERTS_DIR= # CA certificates in this directory will be trusted by the OS of the nexcloud container (Useful e.g. for LDAPS) See See https://github.com/nextcloud/all-in-one#how-to-trust-user-defined-certification-authorities-ca
            # - NEXTCLOUD_STARTUP_APPS=deck twofactor_totp tasks calendar contacts notes # Allows to modify the Nextcloud apps that are installed on starting AIO the first time. See https://github.com/nextcloud/all-in-one#how-to-change-the-nextcloud-apps-that-are-installed-on-the-first-startup
            # - NEXTCLOUD_ADDITIONAL_APKS=imagemagick # This allows to add additional packages to the Nextcloud container permanently. Default is imagemagick but can be overwritten by modifying this value. See https://github.com/nextcloud/all-in-one#how-to-add-os-packages-permanently-to-the-nextcloud-container
            # - NEXTCLOUD_ADDITIONAL_PHP_EXTENSIONS=imagick # This allows to add additional php extensions to the Nextcloud container permanently. Default is imagick but can be overwritten by modifying this value. See https://github.com/nextcloud/all-in-one#how-to-add-php-extensions-permanently-to-the-nextcloud-container
            # - NEXTCLOUD_ENABLE_DRI_DEVICE=true # This allows to enable the /dev/dri device in the Nextcloud container. ⚠️⚠️⚠️ Warning: this only works if the '/dev/dri' device is present on the host! If it should not exist on your host, don't set this to true as otherwise the Nextcloud container will fail to start! See https://github.com/nextcloud/all-in-one#how-to-enable-hardware-transcoding-for-nextcloud
            - TALK_PORT=3478 # This allows to adjust the port that the talk container is using. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-talk-port
            # - WATCHTOWER_DOCKER_SOCKET_PATH=/var/run/docker.sock # Needs to be specified if the docker socket on the host is not located in the default '/var/run/docker.sock'. Otherwise mastercontainer updates will fail. For macos it needs to be '/var/run/docker.sock'
          # networks: # Is needed when you want to create the nextcloud-aio network with ipv6-support using this file, see the network config at the bottom of the file
          #   - nextcloud-aio # Is needed when you want to create the nextcloud-aio network with ipv6-support using this file, see the network config at the bottom of the file

        swag:
          image: lscr.io/linuxserver/swag:latest
          container_name: swag
          profiles:
            - swag
          cap_add:
            - NET_ADMIN
          environment:
            - PUID=1000
            - PGID=1000
            - TZ=US/Eastern
            - URL=${URL}
            - VALIDATION=http
            # - SUBDOMAINS= #optional
            - EMAIL=support@techig.com #optional
            - ONLY_SUBDOMAINS=false #optional
            - EXTRA_DOMAINS= #optional
            - STAGING=${STAGING:-false} #optional
          volumes:
            - /config:/config
          restart: unless-stopped
          ports:
            - 80:80
            - 443:443
          healthcheck:
            test: "curl --fail https://${URL}"
            interval: "60s"
            timeout: "3s"
            start_period: "5s"
            retries: 3

        nginx:
          container_name: nginx
          image: nginx:latest
          profiles:
            - selfsigned
          ports:
            - 80:80
            - 443:443
          restart: always
          volumes:
            - /config/nginx/templates:/etc/nginx/templates/
            - /config/nginx/site-confs:/etc/nginx/conf.d/
            - /config/nginx/ssl:/etc/nginx/ssl/

      volumes:
        nextcloud_aio_mastercontainer:
          name: nextcloud_aio_mastercontainer # This line is not allowed to be changed as otherwise the built-in backup solution will not work
        # swag:
        #   name: swag

      # # Optional: If you need ipv6, follow step 1 and 2 of https://github.com/nextcloud/all-in-one/blob/main/docker-ipv6-support.md first and then uncomment the below config in order to activate ipv6 for the internal nextcloud-aio network.
      # # Please make sure to uncomment also the networking lines of the mastercontainer above in order to actually create the network with docker-compose
      # networks:
      #   nextcloud-aio:
      #     name: nextcloud-aio # This line is not allowed to be changed as otherwise the created network will not be used by the other containers of AIO
          # driver: bridge
      #     enable_ipv6: true
      #     ipam:
      #       driver: default
      #       config:
      #         - subnet: fd12:3456:789a:2::/64 # IPv6 subnet to use
    permissions: '0644'
  - path: /config/nginx/site-confs/default.conf
    content: |
      server {
        listen 80;
        listen [::]:80;

        server_name _;
        server_tokens off;

        location ~ /.well-known/acme-challenge/ {
            allow all;
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
      }
    permissions: '0644'
  - path: /config/nginx/conf-templates/nextcloud.conf.template
    content: |
      server {
        listen [::]:443 ssl http2;
        listen 443 ssl http2;

        server_name $URL;

        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
        ssl_session_tickets off;

        # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
        # ssl_dhparam /path/to/dhparam;

        # intermediate configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
        ssl_prefer_server_ciphers off;

        # HSTS (ngx_http_headers_module is required) (63072000 seconds)
        add_header Strict-Transport-Security "max-age=63072000" always;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;

        root /var/www/html;
        index index.php;

        location / {
            proxy_pass http://127.0.0.1:11000$request_uri;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header X-Forwarded-Scheme $scheme;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Accept-Encoding "";
            proxy_set_header Host $host;

            # Nextcloud headers
            proxy_set_header X-Content-Type-Options nosniff;
            proxy_set_header X-XSS-Protection "1; mode=block";
            proxy_set_header X-Frame-Options "SAMEORIGIN";
            proxy_set_header Referrer-Policy "no-referrer";
        
            client_body_buffer_size 512k;
            proxy_read_timeout 86400s;
            client_max_body_size 0;

            # Websocket
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
      }
    permissions: '0644'
  - path: /opt/deploy/install.sh
    content: |
      #!/bin/bash

      # set -e
      cd /opt/deploy

      echo "Generating /opt/deploy/.env file..."
      if [ -f /opt/deploy/.env ]; then
          source /opt/deploy/.env
      else
          echo "COMPOSE_PROJECT_NAME=nextcloud" | tee -a .env
          source .env
      fi

      install() {
          echo "Setting up WordPress with SSL..."
          if [[ -z "$URL" ]]; then
              echo "URL variable not set, defaulting to self-signed certificate..."
              return 1
          fi
          URL=$(echo $URL | sed 's/https\?:\/\///g') # strip http(s):// from URL
          echo "Your site will be available at https://$URL"

          echo "Creating nginx config..."
          mkdir -p /config/nginx/site-confs
          rm -rf /config/nginx/site-confs/nextcloud.conf
          curl -o /config/nginx/site-confs/nextcloud.conf https://raw.githubusercontent.com/linuxserver/reverse-proxy-confs/master/nextcloud.subdomain.conf.sample
          sed -i "s/server_name.*$/server_name $URL;/g" /config/nginx/site-confs/nextcloud.conf
          
          echo "Starting containers..."
          docker compose --profile selfsigned down nginx
          docker compose --profile swag -f /opt/deploy/docker-compose.yaml up -d
          while [[ ! -f /config/etc/letsencrypt/live/${URL}/fullchain.pem ]] && [[ ! -f /config/etc/letsencrypt/live/${URL}/privkey.pem ]]; do
              echo "Waiting for SSL certs and keys to be generated..."
              sleep 10
          done
          rm -f /config/nginx/ssl/privkey.pem /config/nginx/ssl/fullchain.pem
          ln -s /etc/letsencrypt/live/$URL/fullchain.pem /config/nginx/ssl/fullchain.pem
          ln -s /etc/letsencrypt/live/$URL/privkey.pem /config/nginx/ssl/privkey.pem
          docker restart swag
      }

      install-self-signed() {
          echo "Creating a self-signed certificate..."
          URL=$(curl -s ifconfig.io)
          mkdir -p /config/nginx/ssl
          openssl req -newkey rsa:2048 -nodes -keyout /config/nginx/ssl/privkey.pem -x509 -days 365 -out /config/nginx/ssl/fullchain.pem -subj "/CN=$URL/emailAddress=support@techig.com/C=US"

          echo "Your site will be available at https://$URL"
          rm -rf /config/nginx/site-confs/nextcloud.conf
          envsubst '$URL' < /config/nginx/templates/nextcloud.conf.template > /config/nginx/site-confs/nextcloud.conf

          docker compose -f /opt/deploy/docker-compose.yaml --profile selfsigned up -d
      }

      cleanup() {
          echo "Checking health status of containers..."
          sleep 30
          for container in "nextcloud-aio-mastercontainer" "swag"; do
              healthcheck $container
          done
          sudo crontab -r
          echo "Deleting install files..."
          cd
          rm -rf /opt/deploy
          echo "Finished cleanup"
      }

      healthcheck() {
          echo "Checking health status of container $1..."
          while [[ $(docker inspect -f '{{.State.Health.Status}}' $1) == "starting" ]]; do
              echo "Container $1 is still starting..."
              sleep 10
          done
          if [[ $(docker inspect -f '{{.State.Health.Status}}' $1) == "healthy" ]]; then
              echo "Container $1 is healthy"
              return 0
          else
              echo "Container $1 is not healthy"
              exit 1
          fi
      }

      # Try to install with hostname in the URL variable, if that fails then install with a self-signed certificate
      install
      if [[ $? -eq 0 ]]; then
          cleanup
      else
          install-self-signed
      fi
    permissions: '0755'
  - path: /etc/cron.d/deploy
    content: |
      @reboot ubuntu /opt/deploy/install.sh > /var/log/deploy.log 2>&1
    permissions: '0644'
    owner: root:root
runcmd:
  - cp -f /etc/skel/.bashrc /home/ubuntu/.profile
  - sed -i 's/#force_color_prompt=yes/force_color_prompt=yes/g' /home/ubuntu/.profile
  - sudo chown ubuntu:ubuntu -R /home/ubuntu && sudo chown ubuntu:ubuntu -R /opt/deploy
