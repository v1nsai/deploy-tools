#cloud-config
packages:
  - nnn
  - net-tools
  - docker
  - docker-compose-v2
  - borgbackup
package_update: true
ssh_pwauth: true
users:
  - name: localadmin
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users, admin, sudo, docker
    shell: /bin/bash
    lock_passwd: false
    passwd: $6$rounds=4096$4xwtmE9tkH7lpBdj$k5cDkmhCdc5pAvygr8lZw7DYaKJl1W6itCCktAQx6buCdB/iWJpTTCyO3FeDizlcM6MR0i44yHsonJo1E3fKD1
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIC9eb3g/2Q0OZiIqMMvuVWn6mPie97+32XIj3ara76k9
write_files:
  - path: /etc/environment
    content: |
      OPENPROJECT_ADMIN__EMAIL="ariffle@techig.com"
      OPENPROJECT_HOST__NAME="openproject.techig.com"
      OPDATA=/var/lib/openproject/opdata
      PGDATA=/var/lib/openproject/pgdata
      URL=openproject.techig.com
    append: true
  - path: /opt/deploy/install.sh
    permissions: '0755'
    content: |
      #!/bin/bash

      set -e

      source /etc/environment
      echo "Generating /opt/deploy/.env file..."
      if [[ -f /opt/deploy/.env ]]; then
          source /opt/deploy/.env
      fi
      if [[ -z "$OPENPROJECT_HOST__NAME" ]]; then
          echo "Please enter the URL of your OpenProject instance (e.g. https://www.openproject.org):"
          read OPENPROJECT_HOST__NAME
          OPENPROJECT_HOST__NAME=$(echo $OPENPROJECT_HOST__NAME | sed 's/https\?:\/\///')
          echo "OPENPROJECT_HOST__NAME='$OPENPROJECT_HOST__NAME'" | tee -a /opt/deploy/.env
      fi
      if [[ -z "$OPENPROJECT_ADMIN__EMAIL" ]]; then
          echo "Please enter the email address of the OpenProject admin user:"
          read OPENPROJECT_ADMIN__EMAIL
          echo "OPENPROJECT_ADMIN__EMAIL='$OPENPROJECT_ADMIN__EMAIL'" | tee -a /opt/deploy/.env
      fi
      echo "OPENPROJECT_SECRET_KEY_BASE='$(openssl rand -base64 32)'" | tee -a /opt/deploy/.env
      echo "OPENPROJECT_HTTPS='true'" | tee -a /opt/deploy/.env
      echo "COMPOSE_PROJECT_NAME=openproject" | tee -a /opt/deploy/.env
      source /opt/deploy/.env

      echo "Starting OpenProject..."
      docker compose -f /opt/deploy/docker-compose.yml up -d
  - path: /opt/deploy/docker-compose.yaml
    permissions: '0644'
    content: |
      version: "3.7"

      networks:
        frontend:
        backend:
        nextcloud-aio:
          external: true

      volumes:
        pgdata:
        opdata:

      x-op-restart-policy: &restart_policy
        restart: unless-stopped
      x-op-image: &image
        image: openproject/community:${TAG:-13}
      x-op-app: &app
        <<: [*image, *restart_policy]
        environment:
          OPENPROJECT_LOG__LEVEL: "${OPENPROJECT_LOG__LEVEL:-warn}"
          OPENPROJECT_HTTPS: "${OPENPROJECT_HTTPS:-true}"
          OPENPROJECT_HOST__NAME: "${OPENPROJECT_HOST__NAME:-localhost:9080}"
          OPENPROJECT_HSTS: "${OPENPROJECT_HSTS:-true}"
          RAILS_CACHE_STORE: "memcache"
          OPENPROJECT_CACHE__MEMCACHE__SERVER: "cache:11211"
          OPENPROJECT_RAILS__RELATIVE__URL__ROOT: "${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}"
          DATABASE_URL: "${DATABASE_URL:-postgres://postgres:p4ssw0rd@db/openproject?pool=20&encoding=unicode&reconnect=true}"
          RAILS_MIN_THREADS: ${RAILS_MIN_THREADS:-4}
          RAILS_MAX_THREADS: ${RAILS_MAX_THREADS:-16}
          # set to true to enable the email receiving feature. See ./docker/cron for more options
          IMAP_ENABLED: "${IMAP_ENABLED:-false}"
        volumes:
          - "${OPDATA:-opdata}:/var/openproject/assets"

      services:
        traefik:
          image: traefik:latest
          container_name: traefik
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /etc/traefik/traefik.yaml:/etc/traefik/traefik.yaml
            - /etc/traefik/routes.yaml:/etc/traefik/routes.yaml
            - /etc/traefik/acme.json:/acme.json
            - /etc/traefik/certs:/etc/traefik/certs
          # network_mode: host
          networks:
            - openproject_frontend
          environment:
            - URL=${URL}
          ports:
            - 80:80
            - 443:443
          labels:
            traefik.http.services.traefik-dashboard-service.loadbalancer.server.port: 9999

        db:
          image: postgres:13
          <<: *restart_policy
          stop_grace_period: "3s"
          volumes:
            - "${PGDATA:-pgdata}:/var/lib/postgresql/data"
          environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-p4ssw0rd}
            POSTGRES_DB: openproject
          networks:
            - backend

        cache:
          image: memcached
          <<: *restart_policy
          networks:
            - backend

        proxy:
          <<: [*image, *restart_policy]
          command: "./docker/prod/proxy"
          ports:
            - "${PORT:-8080}:80"
          environment:
            APP_HOST: web
            OPENPROJECT_RAILS__RELATIVE__URL__ROOT: "${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}"
          depends_on:
            - web
          networks:
            - frontend
          labels:
            - traefik.enable=true

        web:
          <<: *app
          command: "./docker/prod/web"
          networks:
            - frontend
            - backend
          depends_on:
            - db
            - cache
            - seeder
          labels:
            - autoheal=true
          healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8080${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}/health_checks/default"]
            interval: 10s
            timeout: 3s
            retries: 3
            start_period: 30s

        autoheal:
          image: willfarrell/autoheal:1.2.0
          volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"
          environment:
            AUTOHEAL_CONTAINER_LABEL: autoheal
            AUTOHEAL_START_PERIOD: 600
            AUTOHEAL_INTERVAL: 30

        worker:
          <<: *app
          command: "./docker/prod/worker"
          networks:
            - backend
          depends_on:
            - db
            - cache
            - seeder

        cron:
          <<: *app
          command: "./docker/prod/cron"
          networks:
            - backend
          depends_on:
            - db
            - cache
            - seeder

        seeder:
          <<: *app
          command: "./docker/prod/seeder"
          restart: on-failure
          networks:
            - backend
  - path: /etc/traefik/traefik.yaml
    permissions: '0644'
    content: |
      log:
        level: INFO
      api:
        dashboard: true
        insecure: true
      entryPoints:
        web:
          address: :80
        websecure:
          address: :443
      providers:
        docker:
          exposedByDefault: false
        file:
          filename: /etc/traefik/routes.yaml
      certificatesResolvers:
        letsencrypt-prod:
          acme:
            email: support@techig.com
            storage: /acme.json
            httpChallenge:
              entryPoint: web
        letsencrypt-staging:
          acme:
            email: support@techig.com
            storage: /acme.json
            caserver: https://acme-staging-v02.api.letsencrypt.org/directory
            httpChallenge:
              entryPoint: web
  - path: /etc/traefik/routes.yaml
    permissions: '0644'
    content: |
      http:
        routers:
          router:
            rule: Host(`openproject.techig.com`) && PathPrefix(`/`)
            service: service
            entryPoints:
              - websecure
            tls: 
              certResolver: letsencrypt-prod

        services:
          service:
            loadBalancer:
              servers:
                - url: http://openproject-proxy-1:80
  - path: /etc/traefik/acme.json
    permissions: '0600'
    content: ''
runcmd:
  - cp -f /etc/skel/.bashrc /home/localadmin/.bashrc
  - sed -i 's/#force_color_prompt=yes/force_color_prompt=yes/g' /home/localadmin/.bashrc
  - cp -f /home/localadmin/.bashrc /home/localadmin/.profile
  - /opt/deploy/install.sh > /var/log/deploy.log 2>&1
  - chown localadmin:localadmin -R /home/localadmin/
  - chown localadmin:localadmin -R /opt/deploy/
